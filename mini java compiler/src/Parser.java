
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\004\010\000\002\004\012\000\002\005\004" +
    "\000\002\005\002\000\002\006\005\000\002\007\004\000" +
    "\002\007\002\000\002\010\016\000\002\010\020\000\002" +
    "\011\004\000\002\011\002\000\002\012\005\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\014\004" +
    "\000\002\013\006\000\002\013\002\000\002\015\005\000" +
    "\002\015\011\000\002\015\007\000\002\015\007\000\002" +
    "\015\006\000\002\015\011\000\002\016\004\000\002\016" +
    "\002\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\006\000" +
    "\002\017\005\000\002\017\007\000\002\017\011\000\002" +
    "\017\003\000\002\017\004\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\007" +
    "\000\002\017\006\000\002\017\004\000\002\017\005\000" +
    "\002\020\005\000\002\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\025\006\001\002\000\004\002\232\001" +
    "\002\000\006\002\ufffb\025\144\001\002\000\004\046\007" +
    "\001\002\000\004\007\010\001\002\000\004\036\011\001" +
    "\002\000\004\040\012\001\002\000\004\044\013\001\002" +
    "\000\004\034\014\001\002\000\004\011\015\001\002\000" +
    "\004\050\016\001\002\000\004\013\017\001\002\000\004" +
    "\014\020\001\002\000\004\046\021\001\002\000\004\012" +
    "\022\001\002\000\004\007\023\001\002\000\014\007\030" +
    "\031\027\041\031\045\026\046\025\001\002\000\004\010" +
    "\141\001\002\000\006\013\130\023\131\001\002\000\004" +
    "\011\124\001\002\000\004\011\116\001\002\000\016\007" +
    "\030\010\uffe5\031\027\041\031\045\026\046\025\001\002" +
    "\000\004\011\032\001\002\000\024\011\044\017\041\021" +
    "\033\030\037\035\034\042\042\043\036\046\043\047\035" +
    "\001\002\000\004\047\111\001\002\000\006\032\103\046" +
    "\102\001\002\000\030\004\uffdb\005\uffdb\006\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\001\002\000\030\004\uffd9\005\uffd9\006\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\001\002\000\030\004\uffd8\005\uffd8\006\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\001\002\000\022\004\054\012\100\013\047\015\050" +
    "\016\053\020\055\021\052\022\051\001\002\000\024\011" +
    "\044\017\041\021\033\030\037\035\034\042\042\043\036" +
    "\046\043\047\035\001\002\000\030\004\uffd6\005\uffd6\006" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\001\002\000\030\004\uffd7\005\uffd7\006" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\001\002\000\024\011\044\017\041\021" +
    "\033\030\037\035\034\042\042\043\036\046\043\047\035" +
    "\001\002\000\022\004\054\012\046\013\047\015\050\016" +
    "\053\020\055\021\052\022\051\001\002\000\030\004\uffd2" +
    "\005\uffd2\006\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\001\002\000\024\011\044" +
    "\017\041\021\033\030\037\035\034\042\042\043\036\046" +
    "\043\047\035\001\002\000\024\011\044\017\041\021\033" +
    "\030\037\035\034\042\042\043\036\046\043\047\035\001" +
    "\002\000\024\011\044\017\041\021\033\030\037\035\034" +
    "\042\042\043\036\046\043\047\035\001\002\000\024\011" +
    "\044\017\041\021\033\030\037\035\034\042\042\043\036" +
    "\046\043\047\035\001\002\000\024\011\044\017\041\021" +
    "\033\030\037\035\034\042\042\043\036\046\043\047\035" +
    "\001\002\000\006\033\057\046\060\001\002\000\024\011" +
    "\044\017\041\021\033\030\037\035\034\042\042\043\036" +
    "\046\043\047\035\001\002\000\030\004\054\005\uffe0\006" +
    "\uffe0\012\uffe0\013\047\014\uffe0\015\uffe0\016\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\001\002\000\030\004\uffde\005\uffde\006" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\020\uffde" +
    "\021\uffde\022\uffde\001\002\000\004\011\061\001\002\000" +
    "\026\011\044\012\063\017\041\021\033\030\037\035\034" +
    "\042\042\043\036\046\043\047\035\001\002\000\024\004" +
    "\054\005\065\012\uffd0\013\047\015\050\016\053\020\055" +
    "\021\052\022\051\001\002\000\030\004\uffdd\005\uffdd\006" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\001\002\000\004\012\070\001\002\000" +
    "\024\011\044\017\041\021\033\030\037\035\034\042\042" +
    "\043\036\046\043\047\035\001\002\000\024\004\054\005" +
    "\065\012\uffd0\013\047\015\050\016\053\020\055\021\052" +
    "\022\051\001\002\000\004\012\uffd1\001\002\000\030\004" +
    "\uffdc\005\uffdc\006\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\020\uffdc\021\uffdc\022\uffdc\001\002\000\030\004" +
    "\054\005\uffe3\006\uffe3\012\uffe3\013\047\014\uffe3\015\uffe3" +
    "\016\uffe3\020\055\021\052\022\051\001\002\000\030\004" +
    "\054\005\uffe1\006\uffe1\012\uffe1\013\047\014\uffe1\015\uffe1" +
    "\016\uffe1\020\055\021\uffe1\022\uffe1\001\002\000\030\004" +
    "\054\005\uffe2\006\uffe2\012\uffe2\013\047\014\uffe2\015\uffe2" +
    "\016\uffe2\020\055\021\uffe2\022\uffe2\001\002\000\030\004" +
    "\054\005\uffe4\006\uffe4\012\uffe4\013\047\014\uffe4\015\uffe4" +
    "\016\053\020\055\021\052\022\051\001\002\000\022\004" +
    "\054\013\047\014\076\015\050\016\053\020\055\021\052" +
    "\022\051\001\002\000\030\004\uffdf\005\uffdf\006\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\001\002\000\030\004\054\005\uffd3\006\uffd3\012" +
    "\uffd3\013\047\014\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\001\002\000\004\006\101\001\002\000\022\007" +
    "\uffe9\010\uffe9\026\uffe9\031\uffe9\037\uffe9\041\uffe9\045\uffe9" +
    "\046\uffe9\001\002\000\004\011\107\001\002\000\004\013" +
    "\104\001\002\000\024\011\044\017\041\021\033\030\037" +
    "\035\034\042\042\043\036\046\043\047\035\001\002\000" +
    "\022\004\054\013\047\014\106\015\050\016\053\020\055" +
    "\021\052\022\051\001\002\000\030\004\uffd5\005\uffd5\006" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\001\002\000\004\012\110\001\002\000" +
    "\030\004\uffd4\005\uffd4\006\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\020\uffd4\021\uffd4\022\uffd4\001\002\000" +
    "\030\004\uffda\005\uffda\006\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\020\uffda\021\uffda\022\uffda\001\002\000" +
    "\004\010\115\001\002\000\020\007\030\010\uffe5\031\027" +
    "\037\uffe5\041\031\045\026\046\025\001\002\000\006\010" +
    "\uffe6\037\uffe6\001\002\000\022\007\uffec\010\uffec\026\uffec" +
    "\031\uffec\037\uffec\041\uffec\045\uffec\046\uffec\001\002\000" +
    "\024\011\044\017\041\021\033\030\037\035\034\042\042" +
    "\043\036\046\043\047\035\001\002\000\022\004\054\012" +
    "\120\013\047\015\050\016\053\020\055\021\052\022\051" +
    "\001\002\000\014\007\030\031\027\041\031\045\026\046" +
    "\025\001\002\000\004\026\122\001\002\000\014\007\030" +
    "\031\027\041\031\045\026\046\025\001\002\000\022\007" +
    "\uffeb\010\uffeb\026\uffeb\031\uffeb\037\uffeb\041\uffeb\045\uffeb" +
    "\046\uffeb\001\002\000\024\011\044\017\041\021\033\030" +
    "\037\035\034\042\042\043\036\046\043\047\035\001\002" +
    "\000\022\004\054\012\126\013\047\015\050\016\053\020" +
    "\055\021\052\022\051\001\002\000\014\007\030\031\027" +
    "\041\031\045\026\046\025\001\002\000\022\007\uffea\010" +
    "\uffea\026\uffea\031\uffea\037\uffea\041\uffea\045\uffea\046\uffea" +
    "\001\002\000\024\011\044\017\041\021\033\030\037\035" +
    "\034\042\042\043\036\046\043\047\035\001\002\000\024" +
    "\011\044\017\041\021\033\030\037\035\034\042\042\043" +
    "\036\046\043\047\035\001\002\000\022\004\054\006\133" +
    "\013\047\015\050\016\053\020\055\021\052\022\051\001" +
    "\002\000\022\007\uffe8\010\uffe8\026\uffe8\031\uffe8\037\uffe8" +
    "\041\uffe8\045\uffe8\046\uffe8\001\002\000\022\004\054\013" +
    "\047\014\135\015\050\016\053\020\055\021\052\022\051" +
    "\001\002\000\004\023\136\001\002\000\024\011\044\017" +
    "\041\021\033\030\037\035\034\042\042\043\036\046\043" +
    "\047\035\001\002\000\022\004\054\006\140\013\047\015" +
    "\050\016\053\020\055\021\052\022\051\001\002\000\022" +
    "\007\uffe7\010\uffe7\026\uffe7\031\uffe7\037\uffe7\041\uffe7\045" +
    "\uffe7\046\uffe7\001\002\000\004\010\142\001\002\000\006" +
    "\002\uffff\025\uffff\001\002\000\004\002\000\001\002\000" +
    "\004\046\147\001\002\000\006\002\ufffb\025\144\001\002" +
    "\000\004\002\ufffc\001\002\000\006\007\151\027\150\001" +
    "\002\000\004\046\225\001\002\000\014\010\ufff8\024\ufff8" +
    "\032\ufff8\036\ufff8\046\ufff8\001\002\000\014\010\ufff4\024" +
    "\161\032\162\036\160\046\157\001\002\000\026\007\ufff9" +
    "\010\ufff9\024\ufff9\031\ufff9\032\ufff9\036\ufff9\037\ufff9\041" +
    "\ufff9\045\ufff9\046\ufff9\001\002\000\004\010\224\001\002" +
    "\000\006\010\ufff4\036\160\001\002\000\004\046\221\001" +
    "\002\000\004\046\ufff0\001\002\000\010\024\161\032\162" +
    "\046\157\001\002\000\004\046\ufff2\001\002\000\006\013" +
    "\163\046\ufff1\001\002\000\004\014\164\001\002\000\004" +
    "\046\ufff3\001\002\000\004\046\166\001\002\000\004\011" +
    "\167\001\002\000\012\012\170\024\161\032\162\046\157" +
    "\001\002\000\004\007\212\001\002\000\004\046\172\001" +
    "\002\000\006\005\173\012\uffed\001\002\000\010\024\161" +
    "\032\162\046\157\001\002\000\004\012\206\001\002\000" +
    "\004\007\176\001\002\000\022\007\ufff8\024\ufff8\031\ufff8" +
    "\032\ufff8\037\ufff8\041\ufff8\045\ufff8\046\ufff8\001\002\000" +
    "\022\007\030\024\161\031\027\032\162\037\uffe5\041\031" +
    "\045\026\046\201\001\002\000\004\037\202\001\002\000" +
    "\010\013\130\023\131\046\ufff0\001\002\000\024\011\044" +
    "\017\041\021\033\030\037\035\034\042\042\043\036\046" +
    "\043\047\035\001\002\000\022\004\054\006\204\013\047" +
    "\015\050\016\053\020\055\021\052\022\051\001\002\000" +
    "\004\010\205\001\002\000\006\010\ufff6\036\ufff6\001\002" +
    "\000\004\007\uffef\001\002\000\004\046\210\001\002\000" +
    "\006\005\173\012\uffed\001\002\000\004\012\uffee\001\002" +
    "\000\022\007\ufff8\024\ufff8\031\ufff8\032\ufff8\037\ufff8\041" +
    "\ufff8\045\ufff8\046\ufff8\001\002\000\022\007\030\024\161" +
    "\031\027\032\162\037\uffe5\041\031\045\026\046\201\001" +
    "\002\000\004\037\215\001\002\000\024\011\044\017\041" +
    "\021\033\030\037\035\034\042\042\043\036\046\043\047" +
    "\035\001\002\000\022\004\054\006\217\013\047\015\050" +
    "\016\053\020\055\021\052\022\051\001\002\000\004\010" +
    "\220\001\002\000\006\010\ufff7\036\ufff7\001\002\000\004" +
    "\006\222\001\002\000\026\007\ufffa\010\ufffa\024\ufffa\031" +
    "\ufffa\032\ufffa\036\ufffa\037\ufffa\041\ufffa\045\ufffa\046\ufffa" +
    "\001\002\000\004\010\ufff5\001\002\000\006\002\ufffe\025" +
    "\ufffe\001\002\000\004\007\226\001\002\000\014\010\ufff8" +
    "\024\ufff8\032\ufff8\036\ufff8\046\ufff8\001\002\000\014\010" +
    "\ufff4\024\161\032\162\036\160\046\157\001\002\000\004" +
    "\010\231\001\002\000\006\002\ufffd\025\ufffd\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\144\005\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\112\016\111\001\001" +
    "\000\002\001\001\000\004\017\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\074\001\001\000\004\017\073\001\001\000\004\017\072" +
    "\001\001\000\004\017\071\001\001\000\004\017\070\001" +
    "\001\000\002\001\001\000\004\017\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\061\001\001\000\004\020\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\065\001\001\000\004\020" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\112\016\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\116\001\001\000\002\001\001\000\004\015\120\001\001" +
    "\000\002\001\001\000\004\015\122\001\001\000\002\001" +
    "\001\000\004\017\124\001\001\000\002\001\001\000\004" +
    "\015\126\001\001\000\002\001\001\000\004\017\133\001" +
    "\001\000\004\017\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\144\005\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\151\001" +
    "\001\000\012\006\152\010\154\011\153\012\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\154\011" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\173\014\174\001\001\000\004" +
    "\012\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\176\001\001\000\012\006\152\012\155\015\112" +
    "\016\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\210\001\001\000\002\001\001\000\004\007\212" +
    "\001\001\000\012\006\152\012\155\015\112\016\213\001" +
    "\001\000\002\001\001\000\004\017\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\226\001\001\000\012\006" +
    "\152\010\154\011\227\012\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

  Symbol s;
    try {
  s = lexer.next_token();
  //System.out.print(s.sym);
  // System.out.print("[");
  // System.out.print(lexer.getLine());
  // System.out.print(":");
  // System.out.print(lexer.getCharPos());
  // System.out.print("] ");
  //System.out.println(sym.terminalNames[s.sym] + " value = " + s.value);
  //if(sym.terminalNames[s.sym].equals("EOF"))
    //System.exit(1);
  /*if (s.value != null)
  {
  
   System.out.print("( ");
   System.out.print(s.value);
   System.out.print(" )");
  }
  System.out.print("\n");*/
  return s;
     } catch (java.lang.Error e) {
         System.err.print("Syntax error at line " + lexer.getLine() + " of input. Lexer\n");
         System.exit(1);
         return null;
     }

    }


  public Lexer lexer;

  public Parser(Lexer lexer)
  {
    super(lexer);
    this.lexer = lexer;
  }

  // Override default error reporting in parser
  public void report_error(String message, Object info)
  {
      System.err.print("Syntax error at line " + lexer.getLine() + " of input. Parser\n");
    System.exit(1);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= mainClass classDeclarationChain 
            {
              Program RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainClass mc = (MainClass)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ClassDecl> cdc = (ArrayList<ClassDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(mc, cdc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainClass ::= CLASS IDENTIFIER LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET IDENTIFIER RPAREN LCURLYBRACKET statement RCURLYBRACKET RCURLYBRACKET 
            {
              MainClass RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new MainClass(id1, id2, stmt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainClass",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDeclaration ::= CLASS IDENTIFIER LCURLYBRACKET varDeclarationChain methodDeclarationChain RCURLYBRACKET 
            {
              ClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VarDecl> vdc = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<MethodDecl> mdc = (ArrayList<MethodDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDecl(id, null, vdc, mdc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDeclaration ::= CLASS IDENTIFIER EXTENDS IDENTIFIER LCURLYBRACKET varDeclarationChain methodDeclarationChain RCURLYBRACKET 
            {
              ClassDecl RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VarDecl> vdc = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<MethodDecl> mdc = (ArrayList<MethodDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDecl(id1, id2, vdc, mdc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDeclarationChain ::= classDeclaration classDeclarationChain 
            {
              ArrayList<ClassDecl> RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ClassDecl> cdc = (ArrayList<ClassDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(cdc == null)
                  cdc = new ArrayList<ClassDecl>();
                cdc.add(0, cd);
                RESULT = cdc;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclarationChain",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classDeclarationChain ::= 
            {
              ArrayList<ClassDecl> RESULT =null;
		 RESULT = new ArrayList<ClassDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclarationChain",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDeclaration ::= type IDENTIFIER SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstType t = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDecl(t, id, lexer.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDeclarationChain ::= varDeclarationChain varDeclaration 
            {
              ArrayList<VarDecl> RESULT =null;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<VarDecl> vdc = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              if(vdc == null)
                vdc = new ArrayList<VarDecl>();
              
              vdc.add(vd);
              
              RESULT = vdc;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclarationChain",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDeclarationChain ::= 
            {
              ArrayList<VarDecl> RESULT =null;
		 RESULT = new ArrayList<VarDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclarationChain",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // methodDeclaration ::= PUBLIC type IDENTIFIER LPAREN RPAREN LCURLYBRACKET varDeclarationChain statementChain RETURN expression SEMICOLON RCURLYBRACKET 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		AstType t = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<VarDecl> vdc = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Statement> sc = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
              ArrayList<FormalArg> list = new ArrayList<FormalArg>();
              RESULT = new MethodDecl(t, id, list, vdc, sc, e1, lexer.getLine());
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // methodDeclaration ::= PUBLIC type IDENTIFIER LPAREN type IDENTIFIER typeChainParen LCURLYBRACKET varDeclarationChain statementChain RETURN expression SEMICOLON RCURLYBRACKET 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		AstType t = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		AstType t2 = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ArrayList<FormalArg> tc = (ArrayList<FormalArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<VarDecl> vdc = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Statement> sc = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
             //Wrap the additional type/id in a Formal
             FormalArg temp = new FormalArg(t2, id2, lexer.getLine());
             
             //Add the first formal to the list, and then add all others from the TypeChain
             ArrayList<FormalArg> list = new ArrayList<FormalArg>();
             list.add(temp);
            
             for(int i = 0; i < tc.size(); i++)
             {
              list.add(tc.get(i));
             }
              
             RESULT = new MethodDecl(t, id, list, vdc, sc, e1, lexer.getLine());
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // methodDeclarationChain ::= methodDeclaration methodDeclarationChain 
            {
              ArrayList<MethodDecl> RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDecl md = (MethodDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<MethodDecl> mdc = (ArrayList<MethodDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(mdc == null)
                  mdc = new ArrayList<MethodDecl>();
                mdc.add(0, md);
               
                RESULT = mdc;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclarationChain",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methodDeclarationChain ::= 
            {
              ArrayList<MethodDecl> RESULT =null;
		 RESULT = new ArrayList<MethodDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclarationChain",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= INT LEFTBRACKET RIGHTBRACKET 
            {
              AstType RESULT =null;
		 RESULT = new IntArrayAstType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= BOOLEAN 
            {
              AstType RESULT =null;
		 RESULT = new BoolAstType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= INT 
            {
              AstType RESULT =null;
		 RESULT = new IntAstType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= IDENTIFIER 
            {
              AstType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RefType(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // typeChainParen ::= typeChain RPAREN 
            {
              ArrayList<FormalArg> RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<FormalArg> tc = (ArrayList<FormalArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = tc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeChainParen",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // typeChain ::= COMMA type IDENTIFIER typeChain 
            {
              ArrayList<FormalArg> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstType t = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<FormalArg> tc = (ArrayList<FormalArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        //Wrap type/id in a Formal
        FormalArg temp = new FormalArg(t, id, lexer.getLine());
        
        if(tc == null)
          tc = new ArrayList<FormalArg>();
        tc.add(0, temp);
        
        RESULT = tc;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeChain",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // typeChain ::= 
            {
              ArrayList<FormalArg> RESULT =null;
		 RESULT = new ArrayList<FormalArg>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeChain",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= LCURLYBRACKET statementChain RCURLYBRACKET 
            {
              Statement RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> sc = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BlockStatement(sc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement(e1, s1, s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStatement(e1, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= PRINTLN LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SysoutStatement(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= IDENTIFIER EQUALS expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignStatement(id, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= IDENTIFIER LEFTBRACKET expression RIGHTBRACKET EQUALS expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignArrayStatement(id, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statementChain ::= statement statementChain 
            {
              ArrayList<Statement> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> sc = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                if(sc == null){
                  sc = new ArrayList<Statement>();
               }
                
              sc.add(0, stmt);
            
            RESULT = sc;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementChain",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statementChain ::= 
            {
              ArrayList<Statement> RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementChain",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression AND expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression LESSTHAN expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LtExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression PLUS expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AddExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression MINUS expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubtractExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression TIMES expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression LEFTBRACKET expression RIGHTBRACKET 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayAccessExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression PERIOD LENGTH 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLengthExpr(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression PERIOD IDENTIFIER LPAREN RPAREN 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
          ArrayList<Expr> ec = new ArrayList<Expr>();
          RESULT = new MethodCallExpr(e1, id, ec); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression PERIOD IDENTIFIER LPAREN expression expressionChain RPAREN 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expr> ec = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          //Create a new list and add "e2" as the first argument.  Then add any from the expressionChain
          ArrayList<Expr> list = new ArrayList<Expr>();
          list.add(e2);
          
          for(int i = 0; i < ec.size(); i++)
          {
            list.add(ec.get(i));
          }
          
          RESULT = new MethodCallExpr(e1, id, list); 
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= NUMBER 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
          Integer x = (Integer) i;
          RESULT = new IntegerLiteralExpr(x.intValue()); 
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= MINUS NUMBER 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
          Integer x = (Integer) i;
          RESULT = new IntegerLiteralExpr(x.intValue()*-1); 
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new TrueExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new FalseExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= IDENTIFIER 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierExpr(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= THIS 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ThisExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= NEW INT LEFTBRACKET expression RIGHTBRACKET 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewIntArrayExpr(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= NEW IDENTIFIER LPAREN RPAREN 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NewObjectExpr(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= EXCLAMATION expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotExpr(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= LPAREN expression RPAREN 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressionChain ::= COMMA expression expressionChain 
            {
              List<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expr> ec = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(ec == null)
              ec = new ArrayList<Expr>();
              
            ec.add(0, e1);
            
            RESULT = ec;
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionChain",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressionChain ::= 
            {
              List<Expr> RESULT =null;
		 RESULT = new ArrayList<Expr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionChain",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
